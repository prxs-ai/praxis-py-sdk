[project]
name = "praxis-sdk-agents"
version = "0.1.0"
description = "Praxis SDK Agents"
authors = [{ name = "hyp0cr4t", email = "hyp0cr4t@icloud.com" }]
readme = "README.md"
requires-python = ">=3.10,<3.14"
dependencies = [
    "fastapi (>=0.115.8,<1.0.0)",
    "openai (>=1.63.2,<2.0.0)",
    "langchain (>=0.3.19,<0.4.0)",
    "jinja2 (>=3.1.5,<4.0.0)",
    "pydantic-settings (>=2.8.0,<3.0.0)",
    "langfuse (>=2.59.3,<3.0.0)",
    "langchain-openai (>=0.3.6,<0.4.0)",
    "mem0ai==0.1.67",
    "lightrag-hku==1.2.5",
    "redisvl (>=0.6.0,<0.7.0)",
    "libp2p @ git+https://github.com/libp2p/py-libp2p.git@main#egg=libp2p",
    "loguru (>=0.7.3,<0.8.0)",
    "trio-asyncio (>=0.15.0,<0.16.0)",
]

[tool.poetry]
packages = [{ include = "praxis_sdk" }]

[project.entry-points."agent.executor.config"]
basic = "praxis_sdk.agents.langchain.config:get_langchain_config"

[project.entry-points."agent.executor.entrypoint"]
basic = "praxis_sdk.agents.langchain.executor:agent_executor"

[project.entry-points."agent.prompt.config"]
basic = "praxis_sdk.agents.prompt.config:get_prompt_config"

[project.entry-points."agent.prompt.entrypoint"]
basic = "praxis_sdk.agents.prompt.builder:prompt_builder"

[project.entry-points."agent.workflow.config"]
basic = "praxis_sdk.agents.orchestration.config:get_workflow_config"

[project.entry-points."agent.workflow.entrypoint"]
basic = "praxis_sdk.agents.orchestration.runner:dag_runner"

[project.entry-points."agent.entrypoint"]
basic = "praxis_sdk.agents.ray_entrypoint:agent_builder"

[project.entry-points."ai.registry.config"]
basic = "praxis_sdk.agents.ai_registry.config:get_ai_registry_config"

[project.entry-points."ai.registry.entrypoint"]
basic = "praxis_sdk.agents.ai_registry.client:ai_registry_client"

[project.entry-points."domain.knowledge.config"]
basic = "praxis_sdk.agents.domain_knowledge.config:get_light_rag_config"

[project.entry-points."domain.knowledge.entrypoint"]
basic = "praxis_sdk.agents.domain_knowledge.client:light_rag_client"

[project.entry-points."memory.config"]
basic = "praxis_sdk.agents.memory.config:get_memory_config"

[project.entry-points."memory.entrypoint"]
basic = "praxis_sdk.agents.memory.client:memory_client"

[project.entry-points."card.entrypoint"]
basic = "praxis_sdk.agents.card.builder:get_agent_card"

[project.entry-points."p2p.entrypoint"]
basic = "praxis_sdk.agents.p2p.manager:get_p2p_manager"

[tool.poetry.group.dev.dependencies]
ray = { extras = ["serve"], version = "2.42.1" }
pytest = "^8.3.4"
pyarrow = "^19.0.1"
factory-boy = "^2.12.0"
pytest-trio = "^0.8.0"
pytest-asyncio = "^1.0.0"
pre-commit = "^4.2.0"
ruff = "^0.11.12"
mypy = "^1.16.0"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 120
target-version = "py310"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "BLE001",
    "F821",
    "PERF",
    "INP001",
    "A001",
    "PLW2901",
    "G",
    "E501",
    "PTH",
    "TRY",
    "ARG",
    "C",
    "ERA",
    "PLR",
    "DTZ",
    "S",
    "RUF",
    "PGH003",
    "PERF203",
    "ANN",
    "TRY401",
    "EM",
    "FBT",
    "TRY003",
    "D1",
    "D203",
    "D213",
    "G004",
    "FA",
    "COM812",
    "ISC001",
    "RUF001",
    "B904",
    "SLF001",
    "ASYNC110",   # ← Разрешает trio.sleep в while циклах
    "ASYNC210",   # ← Разрешает блокирующие HTTP в async функциях
    "ASYNC230",
    "FIX002",
    "T",        # ← Разрешает print() и pprint()
    "T201",     # ← Разрешает print()
    "T203",     # ← Разрешает pprint()
]

[tool.ruff.format]
quote-style = "double"

[tool.mypy]
python_version = "3.10"
# Максимально мягкие настройки для legacy кода
warn_return_any = false
warn_unused_configs = false
check_untyped_defs = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_calls = false
disallow_any_generics = false
disallow_any_unimported = false
disallow_subclassing_any = false
warn_redundant_casts = false
warn_unused_ignores = false
strict_optional = false
strict_equality = false
ignore_missing_imports = true
ignore_errors = false
show_error_codes = true
follow_imports = "silent"

# Исключаем директории с тестами и legacy код
exclude = [
    "tests/",
    "build/",
    "dist/",
    "praxis_sdk/agents/ray_entrypoint.py",  # Много ошибок override
]

# Отключаем самые проблемные коды ошибок
disable_error_code = [
    "no-untyped-def",
    "no-untyped-call",
    "no-any-return",
    "misc",
    "type-arg",
    "unused-ignore",
    "override",
    "assignment",
    "arg-type",
    "call-overload",
    "return-value",
    "attr-defined",
    "name-defined",
    "call-arg",
    "var-annotated",
    "valid-type",
    "comparison-overlap",
    "unused-coroutine",
]

# Игнорируем распространенные ошибки для pydantic и других библиотек
[[tool.mypy.overrides]]
module = [
    "pydantic.*",
    "pydantic_settings.*",
    "ray.*",
    "libp2p.*",
    "multiaddr.*",
    "langchain.*",
    "langfuse.*",
]
ignore_errors = true

# Игнорируем ошибки в проблемных файлах
[[tool.mypy.overrides]]
module = [
    "praxis_sdk.agents.ray_entrypoint",
    "ray_entrypoint",
]
ignore_errors = true
