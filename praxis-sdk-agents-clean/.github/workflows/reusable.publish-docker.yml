name: Reusable - Docker Publish to ECR

on:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string
      dockerfile:
        required: true
        type: string
      path:
        required: true
        type: string
      tag_name:
        required: false
        type: string
    secrets:
      OCI_REGISTRY_TOKEN:
        required: true

env:
  OCI_REGISTRY: harbor.dev.prxs.ai/docker

jobs:
  build:
    permissions:
      id-token: write
      contents: read

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Login to Docker registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.OCI_REGISTRY }}
        username: ${{ vars.OCI_REGISTRY_USER }}
        password: ${{ secrets.OCI_REGISTRY_TOKEN }}

    - name: Build image registry name
      id: build_repo_name
      run: |
        echo "OCI_REPOSITORY=$OCI_REGISTRY/${{ inputs.image_name }}" >> $GITHUB_ENV

    - name: Build image tag
      id: build_tag
      run: |
        # Function to slugify a string to RFC 1123 compliant format
        slugify() {
          local word="$1"
          # Transform to lowercase
          word="${word,,}"
          # Replace non-alphanumeric characters with dashes
          word="$(echo "$word" | sed -E 's/[^a-z0-9-]+/-/g')"
          # Trim dashes from start and end
          word="$(echo "$word" | sed -E 's/^-+|-+$//g')"
          # Smart truncate to a maximum length of 50 characters
          if [ "${#word}" -gt 50 ]; then
            local index=50
            while [ "$index" -gt 0 ]; do
              if [ "${word:index:1}" == "-" ]; then
                break
              fi
              index=$((index - 1))
            done
            if [ "$index" -eq 0 ]; then
              index=50
            fi
            word="${word:0:$index}"
          fi
          echo "$word"
        }

        # First check if a tag_name input is provided
        if [ -n "${{ inputs.tag_name }}" ]; then
          VERSION=${{ inputs.tag_name }}
        # For pull requests, use GITHUB_HEAD_REF
        elif [ -n "$GITHUB_HEAD_REF" ]; then
          BRANCH_NAME=${GITHUB_HEAD_REF//\//-}
          VERSION=$(slugify $BRANCH_NAME)
        # For direct branch pushes
        elif [[ "$GITHUB_REF_TYPE" == "branch" ]]; then
          BRANCH_NAME=${GITHUB_REF_NAME//\//-}
          VERSION=$(slugify $BRANCH_NAME)
        # For tags that have specific version format
        elif [[ "$GITHUB_REF_NAME" =~ ^.*\/${{ inputs.image_name }}-v(.+) ]]; then
          VERSION=v${BASH_REMATCH[1]}
        # Fallback for other references
        else
          TAG_NAME=${GITHUB_REF_NAME//\//-}
          VERSION=$(slugify $TAG_NAME)
        fi
        
        echo "IMAGE_TAG=$VERSION" >> $GITHUB_ENV

    - name: Build Docker image
      run: |
        docker build \
          --file ${{ inputs.dockerfile }} \
          -t $OCI_REPOSITORY:${IMAGE_TAG} \
          ${{ inputs.path }}

    - name: Push to Amazon ECR
      run: |
        docker push --all-tags $OCI_REPOSITORY
