#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã Praxis.
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤, —Å–ª–æ–≤, —Å—Ç—Ä–æ–∫.
"""

import sys
import os
import re
from pathlib import Path


def analyze_text(file_path):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        char_count = len(content)
        
        # –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞ + –ª–∞—Ç–∏–Ω–∏—Ü–∞)
        letter_count = len(re.findall(r'[–∞-—è—ë\w]', content, re.IGNORECASE))
        
        # –°–ª–æ–≤–∞ (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏ –∑–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è)
        word_count = len(re.findall(r'\b\w+\b', content))
        
        # –°—Ç—Ä–æ–∫–∏
        line_count = len(content.split('\n'))
        
        # –ü—Ä–æ–±–µ–ª—ã
        space_count = content.count(' ')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            '—Ñ–∞–π–ª': file_path,
            '–≤—Å–µ–≥–æ_—Å–∏–º–≤–æ–ª–æ–≤': char_count,
            '–±—É–∫–≤': letter_count,
            '—Å–ª–æ–≤': word_count,
            '—Å—Ç—Ä–æ–∫': line_count,
            '–ø—Ä–æ–±–µ–ª–æ–≤': space_count
        }
        
        return result
        
    except Exception as e:
        return {'–æ—à–∏–±–∫–∞': str(e)}


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞."""
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    file_path = None
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è Docker)
    if 'ARG_FILE_PATH' in os.environ:
        file_path = os.environ['ARG_FILE_PATH']
    elif 'ARG_FILENAME' in os.environ:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞, –∏—â–µ–º –≤ /shared
        filename = os.environ['ARG_FILENAME']
        file_path = f'/shared/{filename}'
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ env, –±–µ—Ä–µ–º –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if not file_path and len(sys.argv) > 1:
        file_path = sys.argv[1]
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º test_text.txt
    if not file_path:
        file_path = '/shared/test_text.txt'
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª
    result = analyze_text(file_path)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
    print("=" * 50)
    print("üìä –ê–ù–ê–õ–ò–ó –¢–ï–ö–°–¢–ê")
    print("=" * 50)
    
    if '–æ—à–∏–±–∫–∞' in result:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result['–æ—à–∏–±–∫–∞']}")
        return 1
    
    print(f"üìÅ –§–∞–π–ª: {result['—Ñ–∞–π–ª']}")
    print(f"üìù –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: {result['–≤—Å–µ–≥–æ_—Å–∏–º–≤–æ–ª–æ–≤']}")
    print(f"üî§ –ë—É–∫–≤: {result['–±—É–∫–≤']}")
    print(f"üí¨ –°–ª–æ–≤: {result['—Å–ª–æ–≤']}")
    print(f"üìÑ –°—Ç—Ä–æ–∫: {result['—Å—Ç—Ä–æ–∫']}")
    print(f"‚≠ê –ü—Ä–æ–±–µ–ª–æ–≤: {result['–ø—Ä–æ–±–µ–ª–æ–≤']}")
    print("=" * 50)
    print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
    
    return 0


if __name__ == '__main__':
    sys.exit(main())